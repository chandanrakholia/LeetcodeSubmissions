{"id":735074214,"lang":"cpp","lang_name":"C++","time":"9 months, 1 week","timestamp":1656594147,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/735074214/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int search(vector<int>in,int start,int end,int curr){\n    for (int i = start; i < end; i++)\n    {\n        if (in[i]==curr)\n        {\n            return i;\n        }\n        \n    }\n    // return -1;   \n}\nTreeNode* buildTree1(vector<int>in,vector<int>pre,int start,int end){\n    static int idx=0;\n    if(start>end) return NULL;\n    int curr=pre[idx];\n    idx++;\n    TreeNode* node=new TreeNode(curr);\n    if(start==end){\n        return node;\n    }\n    int pos=search(in,start,end,curr);\n    node->left=buildTree1(in,pre,start,pos-1);\n    node->right=buildTree1(in,pre,pos+1,end);\n    return node;\n}\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        TreeNode* root=buildTree1(inorder,preorder,0,preorder.size()-1);\n            return root;\n    }\n};","compare_result":null,"title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false}