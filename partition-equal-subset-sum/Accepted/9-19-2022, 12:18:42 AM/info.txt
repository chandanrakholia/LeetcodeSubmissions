{"id":803100244,"lang":"cpp","lang_name":"C++","time":"6 months, 2 weeks","timestamp":1663526922,"status":10,"status_display":"Accepted","runtime":"886 ms","url":"/submissions/detail/803100244/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"306.9 MB","code":"class Solution {\npublic:\n    bool knap(vector<int>&nums,int n,int tar,vector<vector<int>>&v){\n        if(tar==0) return true;\n        if(n==0) return false;\n        if(v[n][tar]!=-1) return v[n][tar];\n        if(nums[n]>tar){\n            return v[n][tar]=knap(nums,n-1,tar,v);\n        }\n        else{\n            return v[n][tar]=max(knap(nums,n-1,tar,v),knap(nums,n-1,tar-nums[n],v));\n        }\n    }\n    bool canPartition(vector<int>& nums) {\n        int sum=0;\n        for(int i=0;i<nums.size();i++){\n            sum+=nums[i];\n        }\n        if(sum%2==0){\n            vector<vector<int>>v;\n\n            for(int j=0;j<=nums.size();j++){\n                vector<int>v1;\n                for(int i=0;i<=sum/2;i++){\n                    v1.push_back(-1);\n                }\n                v.push_back(v1);\n            }\n            if(knap(nums,nums.size()-1,sum/2,v)){\n                return true;\n            }\n            return false;\n        }\n        return false;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-equal-subset-sum","has_notes":false}