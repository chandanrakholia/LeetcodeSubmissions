{"id":892647440,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1675689791,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/892647440/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"9.6 MB","code":"class Solution {\npublic:\n    bool bs(vector<vector<int>>& mat, int l, int r, int x, int col)\n    {\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (mat[m/col][m%col] == x)\n                return true;\n            if (mat[m/col][m%col] < x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return false;\n    }\n    bool solve(vector<vector<int>>& matrix, int target){\n        int n=matrix.size();\n        int m=matrix[0].size();\n        int total=n*m;\n        return bs(matrix, 0, total-1, target, m);\n    }\n    bool solve2(vector<vector<int>>& mat, int target){\n        int rows=mat.size();\n        int cols=mat[0].size();\n        int row=0;\n        int col=cols-1;\n        while(row<rows and col>=0){\n            if(target==mat[row][col]) return true;\n            else if(target > mat[row][col]) row++;\n            else col--;\n        }\n        return false;\n    }\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        // return solve(matrix, target);\n        return solve2(matrix, target);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix","has_notes":false}