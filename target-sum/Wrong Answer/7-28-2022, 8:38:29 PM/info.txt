{"id":759097671,"lang":"cpp","lang_name":"C++","time":"8 months, 1 week","timestamp":1659020909,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/759097671/","is_pending":"Not Pending","title":"Target Sum","memory":"N/A","code":"class Solution {\npublic:\n        int no_of_subset(vector<int>&arr,int n,int sum){\n    int t[n+1][sum+1];\n    // memset(t,0,sizeof(t));\n    t[0][0]=1;\n    for (int i = 1; i <= sum; i++)\n    {\n        t[0][i]=0;\n    }\n    \n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 0; j <= sum; j++)\n        {\n            // if (i==0) return 0;\n            // if (j==0) return 1;\n            if (arr[i-1]<=j)\n            {\n                t[i][j]=t[i-1][j-arr[i-1]]+t[i-1][j];\n            }\n            else{\n                t[i][j]=t[i-1][j];\n            }\n            \n        }\n        \n    }\n    return t[n][sum];\n    \n}\n    int findTargetSumWays(vector<int>& nums, int target) {\n                int s=0;\n        for(int i=0;i<nums.size();i++){\n            s+=nums[i];\n        }\n                if(nums.size()==1 and (target==nums[0] or target==-nums[0])) return 1;\n        if(nums.size()==1 and target!=nums[0]) return 0;\n\n        return no_of_subset(nums,nums.size(),(target+s)/2);\n    }\n};","compare_result":"1111111100111101111111111110111001100011111111111111111111111111111111111111111111111111111111111111111111111111110000010111111100000000010","title_slug":"target-sum","has_notes":false}