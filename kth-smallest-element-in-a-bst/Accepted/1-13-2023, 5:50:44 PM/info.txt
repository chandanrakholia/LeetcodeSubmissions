{"id":877409755,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1673612444,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/877409755/","is_pending":"Not Pending","title":"Kth Smallest Element in a BST","memory":"24.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nvoid preorder(TreeNode* root, vector<int> &v){\n    if(root==NULL) return;\n    preorder(root->left, v);\n    v.push_back(root->val);\n    preorder(root->right,v);\n}\n    int kthSmallest(TreeNode* root, int k) {\n        vector<int> v;\n        preorder(root, v);\n        priority_queue<int>pq;\n        for(int i=0;i<v.size();i++){\n            if(pq.size()<k){\n                pq.push(v[i]);\n            }\n            else{\n                if(pq.top()> v[i]){\n                    pq.pop();\n                    pq.push(v[i]);\n                }\n            }\n        }\n        return pq.top();\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-element-in-a-bst","has_notes":false}