{"id":771998648,"lang":"cpp","lang_name":"C++","time":"7 months, 3 weeks","timestamp":1660320977,"status":10,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/771998648/","is_pending":"Not Pending","title":"Minimum Insertion Steps to Make a String Palindrome","memory":"7.7 MB","code":"class Solution {\npublic:\n        int dp[501][501];\n        int solve(string x,string y,int n,int m){\n        for(int i=0;i<n+1;i++){\n            dp[i][0]=0;\n        }\n        for(int i=0;i<m+1;i++){\n            dp[0][i]=0;\n        }\n        for(int i=1;i<n+1;i++){\n            for(int j=1;j<m+1;j++){\n                if(x[i-1]==y[j-1]) \n                    dp[i][j]=dp[i-1][j-1]+1;\n                else{\n                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);\n                }\n            }\n        }\n        return dp[n][m];\n    }\n    int minInsertions(string s) {\n        string rev;\n        int n=s.length();\n    for (int i = n - 1; i >= 0; i--)\n        rev.push_back(s[i]);\n        return n-solve(s,rev,s.length(),rev.length());\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-insertion-steps-to-make-a-string-palindrome","has_notes":false}