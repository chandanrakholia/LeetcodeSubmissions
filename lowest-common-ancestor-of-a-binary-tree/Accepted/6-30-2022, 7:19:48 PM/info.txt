{"id":735101745,"lang":"cpp","lang_name":"C++","time":"9 months, 1 week","timestamp":1656596988,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/735101745/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"15 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    bool findPath(TreeNode *root, vector<int> &path, int k)\n{\n    if (root == NULL) return false;\n    path.push_back(root->val);\n    if (root->val == k)\n        return true;\n    if ( (root->left && findPath(root->left, path, k)) ||\n         (root->right && findPath(root->right, path, k)) )\n        return true;\n    path.pop_back();\n    return false;\n}\nTreeNode* findLCA(TreeNode *root, int n1, int n2)\n{\n    vector<int> path1, path2;\n    if ( !findPath(root, path1, n1) || !findPath(root, path2, n2))\n          return NULL;\n    int i;\n    for (i = 0; i < path1.size() && i < path2.size() ; i++)\n        if (path1[i] != path2[i])\n            break;\n    TreeNode* n=new TreeNode(path1[i-1]);\n    return n;\n}\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        return findLCA(root,p->val,q->val);\n    }\n};","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree","has_notes":false}