{"id":896716238,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1676227190,"status":10,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/896716238/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"19.6 MB","code":"class Solution {\nprivate:\n    void print(vector<vector<int>>&dp){\n        for(auto i: dp){\n            for(auto j: i){\n                cout<<j<<\" \";\n            }\n            cout<<endl;\n        }\n    }\n    void smallestright(vector<int>&h, vector<int>&v, int n){\n        stack<pair<int,int>>st;\n        for(int i=n-1;i>=0;i--){\n            if(st.empty()){\n                v.push_back(n);\n            }\n            else if(h[i]>st.top().first){\n                v.push_back(st.top().second);\n            }\n            else{\n                while(!st.empty() and st.top().first>=h[i]){\n                    st.pop();\n                }\n                if(st.empty()){\n                    v.push_back(n);\n                }\n                else{\n                    v.push_back(st.top().second);\n                }\n            }\n            st.push({h[i],i});\n        }\n        reverse(v.begin(), v.end());\n    }\n    void smallestleft(vector<int>&h, vector<int>&v, int n){\n        stack<pair<int,int>>st;\n        for(int i=0;i<n;i++){\n            if(st.empty()){\n                v.push_back(0);\n            }\n            else if(h[i]>st.top().first){\n                v.push_back(st.top().second+1);\n            }\n            else{\n                while(!st.empty() and st.top().first>=h[i]){\n                    st.pop();\n                }\n                if(st.empty()){\n                    v.push_back(0);\n                }\n                else{\n                    v.push_back(st.top().second+1);\n                }\n            }\n            st.push({h[i],i});\n        }\n    }\npublic:\n    int maximalRectangle(vector<vector<char>>& matrix) {\n        int n=matrix.size();\n        int m=matrix[0].size();\n       vector<vector<int>>dp(n, vector<int>(m)); \n       for(int i=0;i<m;i++){\n           if(matrix[0][i]=='1'){\n               dp[0][i]=1;\n           }\n           else{\n               dp[0][i]=0;\n           }\n       }\n       for(int i=1;i<n;i++){\n           for(int j=0;j<m;j++){\n               if(matrix[i][j]=='1') dp[i][j]=dp[i-1][j]+1;\n               else dp[i][j]=0;\n           }\n       }\n       int maxi=0;\n       for(int k=0;k<n;k++){\n            vector<int>right, left;\n            smallestright(dp[k], right,m);\n            smallestleft(dp[k], left,m);\n            for(int i=0;i<m;i++){\n                maxi=max(maxi, (right[i]-left[i])*dp[k][i]);\n            }\n       }\n    //    print(dp);\n       return maxi;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle","has_notes":false}