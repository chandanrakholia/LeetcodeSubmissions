{"id":737357186,"lang":"cpp","lang_name":"C++","time":"9Â months","timestamp":1656845987,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/737357186/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"16.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void fun1(TreeNode* root,vector<int>&v1){\n        if(root==NULL) return;\n        if(root->right==NULL or root->left==NULL){\n        v1.push_back(-1);\n        }\n                v1.push_back(root->val);\n\n        fun1(root->left,v1);\n        fun1(root->right,v1);\n    }\n    void fun2(TreeNode* root,vector<int>&v2){\n        if(root==NULL) return;\n        if(root->right==NULL or root->left==NULL){\n            v2.push_back(-1);\n        }\n                v2.push_back(root->val);\n\n        fun2(root->right,v2);\n        fun2(root->left,v2);\n    }\n    bool symmetric(TreeNode* root1,TreeNode* root2){\n        if(root1==NULL and root2==NULL) return true;\n        if(root1!=NULL and root2!=NULL and root1->val==root2->val){\n            return symmetric(root1->left,root2->right) and symmetric(root1->right,root2->left);\n        }\n        return false;\n    }\n    bool isSymmetric(TreeNode* root) {\n        // vector<int>v1;\n        // vector<int>v2;\n        // fun1(root,v1);\n        // fun1(root,v2);\n        // bool f=false;\n        // for(int i=0;i<v1.size() and v2.size();i++){\n        //     if(v1[i]!=v2[i]){\n        //         f=true;\n        //         break;\n        //     }\n        // }\n        // if(f){\n        //     return false;\n        // }\n        // else{\n        //     return true;\n        // }\n        return symmetric(root,root);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false}