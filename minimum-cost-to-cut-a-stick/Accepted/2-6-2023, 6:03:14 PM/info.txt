{"id":892623911,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1675686794,"status":10,"status_display":"Accepted","runtime":"90 ms","url":"/submissions/detail/892623911/","is_pending":"Not Pending","title":"Minimum Cost to Cut a Stick","memory":"10.3 MB","code":"class Solution {\npublic:\n    int recursive(int i, int j, vector<int> &cuts, vector<vector<int> > &dp){\n        if(i > j) return 0;\n        if(dp[i][j]!=-1) return dp[i][j];\n        int mini=INT_MAX;\n        for(int k=i;k<=j;k++){\n            int temp=cuts[j+1]-cuts[i-1]+recursive(i,k-1,cuts,dp)+recursive(k+1, j, cuts,dp);\n            mini=min(mini, temp);\n        }\n        return dp[i][j]=mini;\n    }\n    int minCost(int n, vector<int>& cuts) {\n        int c=cuts.size();\n        cuts.push_back(n);\n        cuts.insert(cuts.begin(), 0);\n        sort(cuts.begin(), cuts.end());\n        vector<vector<int> > dp(c+1, vector<int> (c+1, -1));\n        return recursive(1,c , cuts, dp);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-to-cut-a-stick","has_notes":false}